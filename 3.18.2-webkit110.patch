This only works with our patched 2.0.4 with 2.2 APIs.

--- origsrc/gnome-online-accounts-3.18.2.1/configure.ac	2015-11-11 10:13:02.000000000 -0600
+++ src/gnome-online-accounts-3.18.2.1/configure.ac	2015-11-18 21:20:24.775954700 -0600
@@ -105,7 +105,7 @@ if test "$enable_backend" != "no"; then
   AC_SUBST(GTK_CFLAGS)
   AC_SUBST(GTK_LIBS)
 
-  PKG_CHECK_MODULES(WEBKIT_GTK, [webkit2gtk-4.0 >= 2.7.2])
+  PKG_CHECK_MODULES(WEBKIT_GTK, [webkitgtk-3.0 >= 2.0.4])
   AC_SUBST(WEBKIT_GTK_CFLAGS)
   AC_SUBST(WEBKIT_GTK_LIBS)
 
--- origsrc/gnome-online-accounts-3.18.2.1/data/Makefile.am	2015-11-11 10:25:47.000000000 -0600
+++ src/gnome-online-accounts-3.18.2.1/data/Makefile.am	2015-11-18 21:17:27.282915900 -0600
@@ -3,6 +3,9 @@ NULL =
 
 SUBDIRS = icons
 
+cssdir = $(pkgdatadir)
+css_DATA = goawebview.css
+
 gsettings_in_files = org.gnome.online-accounts.gschema.xml.in
 
 if BUILD_BACKEND
@@ -24,6 +27,7 @@ service_DATA     = $(service_in_files:.s
 	@sed -e "s|\@libexecdir\@|$(libexecdir)|" $< > $@
 
 EXTRA_DIST =						\
+	$(css_DATA)					\
 	$(gsettings_in_files)				\
 	dbus-interfaces.xml				\
 	org.gnome.Identity.service.in			\
--- origsrc/gnome-online-accounts-3.18.2.1/data/goawebview.css  1969-12-31 18:00:00.000000000 -0600
+++ src/gnome-online-accounts-3.18.2.1/data/goawebview.css      2015-11-18 21:17:27.285416300 -0600
@@ -0,0 +1,3 @@
+::-webkit-scrollbar {
+  display: none !important;
+}
--- origsrc/gnome-online-accounts-3.18.2.1/src/goabackend/Makefile.am	2015-11-18 21:12:11.639834400 -0600
+++ src/gnome-online-accounts-3.18.2.1/src/goabackend/Makefile.am	2015-11-18 21:19:32.739847000 -0600
@@ -19,7 +19,6 @@ AM_CPPFLAGS = 							\
 	-DPACKAGE_LOCALSTATE_DIR=\""$(localstatedir)"\" 	\
 	-DPACKAGE_LOCALE_DIR=\""$(localedir)"\" 		\
 	-DPACKAGE_LIB_DIR=\""$(libdir)"\" 			\
-	-DPACKAGE_WEB_EXTENSIONS_DIR=\""$(libdir)/goa-1.0/web-extensions"\" \
 	-D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT			\
 	$(WARN_CFLAGS)						\
 	$(NULL)
@@ -142,41 +141,6 @@ libgoa_backend_1_0_la_LDFLAGS = 				\
 
 # ----------------------------------------------------------------------------------------------------
 
-webextension_LTLIBRARIES = libgoawebextension.la
-
-webextensiondir = $(libdir)/goa-1.0/web-extensions
-
-libgoawebextension_la_SOURCES =						\
-	goawebextension.h		goawebextension.c		\
-	goawebextensionmain.c						\
-	$(NULL)
-
-libgoawebextension_la_CFLAGS =						\
-	$(REST_CFLAGS)							\
-	$(WEBKIT_GTK_CFLAGS)						\
-	$(NULL)
-
-libgoawebextension_la_LIBADD =						\
-	libgoa-backend-1.0.la						\
-	$(REST_LIBS)							\
-	$(WEBKIT_GTK_LIBS)						\
-	$(NULL)
-
-libgoawebextension_la_LDFLAGS =						\
-	-avoid-version							\
-	-module								\
-	-no-undefined							\
-	$(NULL)
-
-# Force installation order: libgoa-backend-1.0 must be installed first, othwerwise
-# libtool will incorrectly relink libgoawebextension.la under parallel make install.
-# Requires ugly automake syntax - see http://debbugs.gnu.org/cgi/bugreport.cgi?bug=7328
-
-installwebextensionLTLIBRARIES = install-webextensionLTLIBRARIES
-$(installwebextensionLTLIBRARIES): install-libLTLIBRARIES
-
-# ----------------------------------------------------------------------------------------------------
-
 BUILT_SOURCES =								\
 	$(libgoa_backend_1_0_la_built_sources)				\
 	$(NULL)
--- origsrc/gnome-online-accounts-3.18.2.1/src/goabackend/goaoauth2provider.c	2015-11-11 04:24:58.000000000 -0600
+++ src/gnome-online-accounts-3.18.2.1/src/goabackend/goaoauth2provider.c	2015-11-18 21:17:27.298918000 -0600
@@ -23,7 +23,7 @@
 #include <rest/oauth2-proxy.h>
 #include <libsoup/soup.h>
 #include <json-glib/json-glib.h>
-#include <webkit2/webkit2.h>
+#include <webkit/webkit.h>
 
 #include "goaprovider.h"
 #include "goautils.h"
@@ -66,6 +66,7 @@ struct _GoaOAuth2ProviderPrivate
   GError *error;
   GMainLoop *loop;
 
+  WebKitDOMHTMLInputElement *password_node;
   const gchar *existing_identity;
 
   gchar *account_object_path;
@@ -774,7 +775,7 @@ get_tokens_sync (GoaOAuth2Provider  *pro
 /* ---------------------------------------------------------------------------------------------------- */
 
 static void
-on_web_view_deny_click (GoaWebView *web_view, gpointer user_data)
+on_dom_node_click (WebKitDOMNode *element, WebKitDOMEvent *event, gpointer user_data)
 {
   GoaOAuth2Provider *provider = GOA_OAUTH2_PROVIDER (user_data);
   GoaOAuth2ProviderPrivate *priv = provider->priv;
@@ -782,26 +783,84 @@ on_web_view_deny_click (GoaWebView *web_
 }
 
 static void
-on_web_view_password_submit (GoaWebView *web_view, const gchar *password, gpointer user_data)
+on_form_submit (WebKitDOMNode *element, WebKitDOMEvent *event, gpointer user_data)
 {
   GoaOAuth2Provider *provider = GOA_OAUTH2_PROVIDER (user_data);
   GoaOAuth2ProviderPrivate *priv = provider->priv;
 
-  g_free (priv->password);
-  priv->password = g_strdup (password);
+  if (priv->password_node == NULL)
+    return;
+
+  priv->password = webkit_dom_html_input_element_get_value (priv->password_node);
+  priv->password_node = NULL;
+}
+
+static void
+on_web_view_document_load_finished (WebKitWebView *web_view, WebKitWebFrame *frame, gpointer user_data)
+{
+  GoaOAuth2Provider *provider = GOA_OAUTH2_PROVIDER (user_data);
+  GoaOAuth2ProviderPrivate *priv = provider->priv;
+  WebKitDOMDocument *document;
+  WebKitDOMNodeList *elements;
+  gulong element_count;
+  gulong i;
+
+  document = webkit_web_view_get_dom_document (WEBKIT_WEB_VIEW (web_view));
+  elements = webkit_dom_document_get_elements_by_tag_name (document, "*");
+  element_count = webkit_dom_node_list_get_length (elements);
+
+  for (i = 0; i < element_count; i++)
+    {
+      WebKitDOMNode *element = webkit_dom_node_list_item (elements, i);
+
+      if (goa_oauth2_provider_is_deny_node (provider, element))
+        {
+          webkit_dom_event_target_add_event_listener (WEBKIT_DOM_EVENT_TARGET (element),
+                                                      "click",
+                                                      G_CALLBACK (on_dom_node_click),
+                                                      FALSE,
+                                                      provider);
+        }
+      else if (priv->existing_identity != NULL
+               && WEBKIT_DOM_IS_HTML_INPUT_ELEMENT (element)
+               && goa_oauth2_provider_is_identity_node (provider, WEBKIT_DOM_HTML_INPUT_ELEMENT (element)))
+        {
+          webkit_dom_html_input_element_set_value (WEBKIT_DOM_HTML_INPUT_ELEMENT (element),
+                                                   priv->existing_identity);
+          webkit_dom_html_input_element_set_read_only (WEBKIT_DOM_HTML_INPUT_ELEMENT (element), TRUE);
+        }
+      else if (WEBKIT_DOM_IS_HTML_INPUT_ELEMENT (element)
+               && goa_oauth2_provider_is_password_node (provider, WEBKIT_DOM_HTML_INPUT_ELEMENT (element)))
+        {
+          WebKitDOMHTMLFormElement *form;
+
+          form = webkit_dom_html_input_element_get_form (WEBKIT_DOM_HTML_INPUT_ELEMENT (element));
+          if (form != NULL)
+            {
+              priv->password_node = WEBKIT_DOM_HTML_INPUT_ELEMENT (element);
+              g_clear_pointer (&priv->password, g_free);
+              webkit_dom_event_target_add_event_listener (WEBKIT_DOM_EVENT_TARGET (form),
+                                                          "submit",
+                                                          G_CALLBACK (on_form_submit),
+                                                          FALSE,
+                                                          provider);
+            }
+        }
+    }
 }
 
 static gboolean
-on_web_view_decide_policy (WebKitWebView            *web_view,
-                           WebKitPolicyDecision     *decision,
-                           WebKitPolicyDecisionType  decision_type,
-                           gpointer                  user_data)
+on_web_view_navigation_policy_decision_requested (WebKitWebView             *webView,
+                                                  WebKitWebFrame            *frame,
+                                                  WebKitNetworkRequest      *request,
+                                                  WebKitWebNavigationAction *navigation_action,
+                                                  WebKitWebPolicyDecision   *policy_decision,
+                                                  gpointer                   user_data)
 {
   GoaOAuth2Provider *provider = GOA_OAUTH2_PROVIDER (user_data);
   GoaOAuth2ProviderPrivate *priv = provider->priv;
   GHashTable *key_value_pairs;
-  WebKitNavigationAction *action;
-  WebKitURIRequest *request;
+  SoupMessage *message;
   SoupURI *uri;
   const gchar *fragment;
   const gchar *oauth2_error;
@@ -810,19 +869,15 @@ on_web_view_decide_policy (WebKitWebView
   const gchar *requested_uri;
   gint response_id = GTK_RESPONSE_NONE;
 
-  if (decision_type != WEBKIT_POLICY_DECISION_TYPE_NAVIGATION_ACTION)
-    goto default_behaviour;
-
   /* TODO: use oauth2_proxy_extract_access_token() */
 
-  action = webkit_navigation_policy_decision_get_navigation_action (WEBKIT_NAVIGATION_POLICY_DECISION (decision));
-  request = webkit_navigation_action_get_request (action);
-  requested_uri = webkit_uri_request_get_uri (request);
+  requested_uri = webkit_network_request_get_uri (request);
   redirect_uri = goa_oauth2_provider_get_redirect_uri (provider);
   if (!g_str_has_prefix (requested_uri, redirect_uri))
     goto default_behaviour;
 
-  uri = soup_uri_new (requested_uri);
+  message = webkit_network_request_get_message (request);
+  uri = soup_message_get_uri (message);
   fragment = soup_uri_get_fragment (uri);
   query = soup_uri_get_query (uri);
 
@@ -920,7 +975,7 @@ on_web_view_decide_policy (WebKitWebView
  ignore_request:
   g_assert (response_id != GTK_RESPONSE_NONE);
   gtk_dialog_response (priv->dialog, response_id);
-  webkit_policy_decision_ignore (decision);
+  webkit_web_policy_decision_ignore (policy_decision);
   return TRUE;
 
  default_behaviour:
@@ -994,7 +1049,7 @@ get_tokens_and_identity (GoaOAuth2Provid
   gtk_grid_set_row_spacing (GTK_GRID (grid), 12);
   gtk_container_add (GTK_CONTAINER (vbox), grid);
 
-  web_view = goa_web_view_new (GOA_PROVIDER (provider), existing_identity);
+  web_view = goa_web_view_new ();
   gtk_widget_set_hexpand (web_view, TRUE);
   gtk_widget_set_vexpand (web_view, TRUE);
   embed = goa_web_view_get_view (GOA_WEB_VIEW (web_view));
@@ -1008,12 +1063,11 @@ get_tokens_and_identity (GoaOAuth2Provid
     goa_web_view_fake_mobile (GOA_WEB_VIEW (web_view));
 
   webkit_web_view_load_uri (WEBKIT_WEB_VIEW (embed), url);
+  g_signal_connect (embed, "document-load-finished", G_CALLBACK (on_web_view_document_load_finished), provider);
   g_signal_connect (embed,
-                    "decide-policy",
-                    G_CALLBACK (on_web_view_decide_policy),
+                    "navigation-policy-decision-requested",
+                    G_CALLBACK (on_web_view_navigation_policy_decision_requested),
                     provider);
-  g_signal_connect (web_view, "deny-click", G_CALLBACK (on_web_view_deny_click), provider);
-  g_signal_connect (web_view, "password-submit", G_CALLBACK (on_web_view_password_submit), provider);
 
   gtk_container_add (GTK_CONTAINER (grid), web_view);
 
--- origsrc/gnome-online-accounts-3.18.2.1/src/goabackend/goaoauthprovider.c	2015-11-11 04:24:58.000000000 -0600
+++ src/gnome-online-accounts-3.18.2.1/src/goabackend/goaoauthprovider.c	2015-11-18 21:17:27.304918700 -0600
@@ -23,7 +23,7 @@
 #include <rest/oauth-proxy.h>
 #include <libsoup/soup.h>
 #include <json-glib/json-glib.h>
-#include <webkit2/webkit2.h>
+#include <webkit/webkit.h>
 
 #include "goaprovider.h"
 #include "goautils.h"
@@ -619,6 +619,7 @@ typedef struct
   GError *error;
   GMainLoop *loop;
 
+  WebKitDOMHTMLInputElement *password_node;
   gchar *password;
 
   gchar *oauth_verifier;
@@ -638,48 +639,102 @@ typedef struct
 } IdentifyData;
 
 static void
-on_web_view_deny_click (GoaWebView *web_view, gpointer user_data)
+on_dom_node_click (WebKitDOMNode *element, WebKitDOMEvent *event, gpointer user_data)
 {
   IdentifyData *data = user_data;
   gtk_dialog_response (data->dialog, GTK_RESPONSE_CANCEL);
 }
 
 static void
-on_web_view_password_submit (GoaWebView *web_view, const gchar *password, gpointer user_data)
+on_form_submit (WebKitDOMNode *element, WebKitDOMEvent *event, gpointer user_data)
 {
   IdentifyData *data = user_data;
 
-  g_free (data->password);
-  data->password = g_strdup (password);
+  if (data->password_node == NULL)
+    return;
+
+  data->password = webkit_dom_html_input_element_get_value (data->password_node);
+  data->password_node = NULL;
+}
+
+static void
+on_web_view_document_load_finished (WebKitWebView *web_view, WebKitWebFrame *frame, gpointer user_data)
+{
+  IdentifyData *data = user_data;
+  GoaOAuthProvider *provider = data->provider;
+  WebKitDOMDocument *document;
+  WebKitDOMNodeList *elements;
+  gulong element_count;
+  gulong i;
+
+  document = webkit_web_view_get_dom_document (WEBKIT_WEB_VIEW (web_view));
+  elements = webkit_dom_document_get_elements_by_tag_name (document, "*");
+  element_count = webkit_dom_node_list_get_length (elements);
+
+  for (i = 0; i < element_count; i++)
+    {
+      WebKitDOMNode *element = webkit_dom_node_list_item (elements, i);
+
+      if (goa_oauth_provider_is_deny_node (provider, element))
+        {
+          webkit_dom_event_target_add_event_listener (WEBKIT_DOM_EVENT_TARGET (element),
+                                                      "click",
+                                                      G_CALLBACK (on_dom_node_click),
+                                                      FALSE,
+                                                      data);
+        }
+      else if (data->existing_identity != NULL
+               && WEBKIT_DOM_IS_HTML_INPUT_ELEMENT (element)
+               && goa_oauth_provider_is_identity_node (provider, WEBKIT_DOM_HTML_INPUT_ELEMENT (element)))
+        {
+          webkit_dom_html_input_element_set_value (WEBKIT_DOM_HTML_INPUT_ELEMENT (element),
+                                                   data->existing_identity);
+          webkit_dom_html_input_element_set_read_only (WEBKIT_DOM_HTML_INPUT_ELEMENT (element), TRUE);
+        }
+      else if (WEBKIT_DOM_IS_HTML_INPUT_ELEMENT (element)
+               && goa_oauth_provider_is_password_node (provider, WEBKIT_DOM_HTML_INPUT_ELEMENT (element)))
+        {
+          WebKitDOMHTMLFormElement *form;
+
+          form = webkit_dom_html_input_element_get_form (WEBKIT_DOM_HTML_INPUT_ELEMENT (element));
+          if (form != NULL)
+            {
+              data->password_node = WEBKIT_DOM_HTML_INPUT_ELEMENT (element);
+              g_clear_pointer (&data->password, g_free);
+              webkit_dom_event_target_add_event_listener (WEBKIT_DOM_EVENT_TARGET (form),
+                                                          "submit",
+                                                          G_CALLBACK (on_form_submit),
+                                                          FALSE,
+                                                          data);
+            }
+        }
+    }
 }
 
 static gboolean
-on_web_view_decide_policy (WebKitWebView            *web_view,
-                           WebKitPolicyDecision     *decision,
-                           WebKitPolicyDecisionType  decision_type,
-                           gpointer                  user_data)
+on_web_view_navigation_policy_decision_requested (WebKitWebView             *webView,
+                                                  WebKitWebFrame            *frame,
+                                                  WebKitNetworkRequest      *request,
+                                                  WebKitWebNavigationAction *navigation_action,
+                                                  WebKitWebPolicyDecision   *policy_decision,
+                                                  gpointer                   user_data)
 {
   IdentifyData *data = user_data;
-  WebKitNavigationAction *action;
-  WebKitURIRequest *request;
   const gchar *redirect_uri;
   const gchar *requested_uri;
 
-  if (decision_type != WEBKIT_POLICY_DECISION_TYPE_NAVIGATION_ACTION)
-    return FALSE;
-
   /* TODO: use oauth_proxy_extract_access_token() */
 
-  action = webkit_navigation_policy_decision_get_navigation_action (WEBKIT_NAVIGATION_POLICY_DECISION (decision));
-  request = webkit_navigation_action_get_request (action);
-  requested_uri = webkit_uri_request_get_uri (request);
+  requested_uri = webkit_network_request_get_uri (request);
   redirect_uri = goa_oauth_provider_get_callback_uri (data->provider);
   if (g_str_has_prefix (requested_uri, redirect_uri))
     {
+      SoupMessage *message;
       SoupURI *uri;
       GHashTable *key_value_pairs;
 
-      uri = soup_uri_new (requested_uri);
+      message = webkit_network_request_get_message (request);
+      uri = soup_message_get_uri (message);
       key_value_pairs = soup_form_decode (uri->query);
 
       /* TODO: error handling? */
@@ -689,7 +744,7 @@ on_web_view_decide_policy (WebKitWebView
           gtk_dialog_response (data->dialog, GTK_RESPONSE_OK);
         }
       g_hash_table_unref (key_value_pairs);
-      webkit_policy_decision_ignore (decision);
+      webkit_web_policy_decision_ignore (policy_decision);
       return TRUE; /* ignore the request */
     }
   else
@@ -832,7 +887,7 @@ get_tokens_and_identity (GoaOAuthProvide
                                                             goa_oauth_provider_get_authorization_uri (provider),
                                                             escaped_request_token);
 
-  web_view = goa_web_view_new (GOA_PROVIDER (provider), existing_identity);
+  web_view = goa_web_view_new ();
   gtk_widget_set_hexpand (web_view, TRUE);
   gtk_widget_set_vexpand (web_view, TRUE);
   embed = goa_web_view_get_view (GOA_WEB_VIEW (web_view));
@@ -841,12 +896,11 @@ get_tokens_and_identity (GoaOAuthProvide
     goa_web_view_fake_mobile (GOA_WEB_VIEW (web_view));
 
   webkit_web_view_load_uri (WEBKIT_WEB_VIEW (embed), url);
+  g_signal_connect (embed, "document-load-finished", G_CALLBACK (on_web_view_document_load_finished), &data);
   g_signal_connect (embed,
-                    "decide-policy",
-                    G_CALLBACK (on_web_view_decide_policy),
+                    "navigation-policy-decision-requested",
+                    G_CALLBACK (on_web_view_navigation_policy_decision_requested),
                     &data);
-  g_signal_connect (web_view, "deny-click", G_CALLBACK (on_web_view_deny_click), &data);
-  g_signal_connect (web_view, "password-submit", G_CALLBACK (on_web_view_password_submit), &data);
 
   gtk_container_add (GTK_CONTAINER (grid), web_view);
 
--- origsrc/gnome-online-accounts-3.18.2.1/src/goabackend/goaoauthprovider.h	2015-10-27 12:42:49.000000000 -0500
+++ src/gnome-online-accounts-3.18.2.1/src/goabackend/goaoauthprovider.h	2015-11-18 21:17:27.307919100 -0600
@@ -120,10 +120,8 @@ struct _GoaOAuthProviderClass
                                                 WebKitDOMHTMLInputElement    *element);
 
   /*< private >*/
-  GoaOAuthProviderPrivate *priv;
-
   /* Padding for future expansion */
-  gpointer goa_reserved[28];
+  gpointer goa_reserved[29];
 };
 
 GType        goa_oauth_provider_get_type                     (void) G_GNUC_CONST;
--- origsrc/gnome-online-accounts-3.18.2.1/src/goabackend/goawebview.c	2015-10-27 12:42:49.000000000 -0500
+++ src/gnome-online-accounts-3.18.2.1/src/goabackend/goawebview.c	2015-11-18 21:17:29.625713400 -0600
@@ -1,7 +1,6 @@
 /* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
  *
- * Copyright (C) 2015 Damián Nohales
- * Copyright (C) 2012, 2013, 2014, 2015 Red Hat, Inc.
+ * Copyright (C) 2012, 2013, 2014 Red Hat, Inc.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -24,49 +23,24 @@
 
 #include <glib.h>
 #include <glib/gi18n-lib.h>
-#include <JavaScriptCore/JavaScript.h>
 #include <libsoup/soup.h>
-#include <webkit2/webkit2.h>
+#include <webkit/webkit.h>
 
 #include "goawebview.h"
 #include "nautilus-floating-bar.h"
 
-struct _GoaWebView
+struct _GoaWebViewPrivate
 {
-  GtkOverlay parent_instance;
-  GoaProvider *provider;
   GtkWidget *floating_bar;
   GtkWidget *progress_bar;
   GtkWidget *web_view;
-  SoupCookieJar *cookie_jar;
-  WebKitUserContentManager *user_content_manager;
-  WebKitWebContext *context;
-  gchar *existing_identity;
+  gboolean status;
   gulong clear_notify_progress_id;
   gulong notify_load_status_id;
   gulong notify_progress_id;
 };
 
-struct _GoaWebViewClass
-{
-  GtkOverlayClass parent_class;
-};
-
-enum
-{
-  PROP_0,
-  PROP_EXISTING_IDENTITY,
-  PROP_PROVIDER
-};
-
-enum
-{
-  DENY_CLICK,
-  PASSWORD_SUBMIT,
-  LAST_SIGNAL
-};
-
-static guint signals[LAST_SIGNAL] = { 0 };
+#define GOA_WEB_VIEW_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GOA_TYPE_WEB_VIEW, GoaWebViewPrivate))
 
 G_DEFINE_TYPE (GoaWebView, goa_web_view, GTK_TYPE_OVERLAY)
 
@@ -74,9 +48,10 @@ static gboolean
 web_view_clear_notify_progress_cb (gpointer user_data)
 {
   GoaWebView *self = GOA_WEB_VIEW (user_data);
+  GoaWebViewPrivate *priv = self->priv;
 
-  gtk_widget_hide (self->progress_bar);
-  self->clear_notify_progress_id = 0;
+  gtk_widget_hide (priv->progress_bar);
+  priv->clear_notify_progress_id = 0;
   return FALSE;
 }
 
@@ -101,88 +76,71 @@ web_view_create_loading_title (const gch
 static void
 web_view_floating_bar_update (GoaWebView *self, const gchar *text)
 {
-  nautilus_floating_bar_set_label (NAUTILUS_FLOATING_BAR (self->floating_bar), text);
+  GoaWebViewPrivate *priv = self->priv;
+
+  nautilus_floating_bar_set_label (NAUTILUS_FLOATING_BAR (priv->floating_bar), text);
 
   if (text == NULL || text[0] == '\0')
     {
-      gtk_widget_hide (self->floating_bar);
-      gtk_widget_set_halign (self->floating_bar, GTK_ALIGN_START);
+      gtk_widget_hide (priv->floating_bar);
+      gtk_widget_set_halign (priv->floating_bar, GTK_ALIGN_START);
     }
   else
-    gtk_widget_show (self->floating_bar);
+    gtk_widget_show (priv->floating_bar);
 }
 
-static void
-web_view_initialize_web_extensions_cb (GoaWebView *self)
+static gboolean
+web_view_is_loading (GoaWebView *self)
 {
-  GVariant *data;
-  const gchar *existing_identity;
-  const gchar *provider_type;
+  GoaWebViewPrivate *priv = self->priv;
+  WebKitLoadStatus status;
 
-  webkit_web_context_set_web_extensions_directory (self->context, PACKAGE_WEB_EXTENSIONS_DIR);
+  status = webkit_web_view_get_load_status (WEBKIT_WEB_VIEW (priv->web_view));
 
-  if (self->provider == NULL)
-    return;
+  if ((priv->status == WEBKIT_LOAD_FINISHED || priv->status == WEBKIT_LOAD_FAILED)
+      && status != WEBKIT_LOAD_PROVISIONAL)
+    return FALSE;
 
-  provider_type = goa_provider_get_provider_type (self->provider);
-  existing_identity = (self->existing_identity == NULL) ? "" : self->existing_identity;
-  data = g_variant_new ("(ss)", provider_type, existing_identity);
-  webkit_web_context_set_web_extensions_initialization_user_data (self->context, data);
+  priv->status = status;
+  return status != WEBKIT_LOAD_FINISHED && status != WEBKIT_LOAD_FAILED;
 }
 
-#ifdef GOA_INSPECTOR_ENABLED
 static void
-web_view_inspector_closed_cb (WebKitWebInspector *inspector)
+web_view_log_printer (SoupLogger         *logger,
+                      SoupLoggerLogLevel  level,
+                      gchar               direction,
+                      const gchar        *data,
+                      gpointer            user_data)
 {
-  GtkWidget *window;
-  WebKitWebViewBase *inspector_web_view;
-
-  inspector_web_view = webkit_web_inspector_get_web_view (inspector);
-  window = gtk_widget_get_toplevel (GTK_WIDGET (inspector_web_view));
-  if (gtk_widget_is_toplevel (window))
-    gtk_widget_destroy (window);
-}
-
-static gboolean
-web_view_inspector_open_window_cb (WebKitWebInspector *inspector)
-{
-  GtkWidget *window;
-  GtkWindowGroup *group;
-  WebKitWebViewBase *inspector_web_view;
-
-  group = gtk_window_group_new ();
-
-  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
-  gtk_window_resize (GTK_WINDOW (window), 800, 600);
-  gtk_window_group_add_window (group, GTK_WINDOW (window));
-  g_object_unref (group);
+  gchar *message;
 
-  inspector_web_view = webkit_web_inspector_get_web_view (inspector);
-  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (inspector_web_view));
-
-  gtk_widget_show_all (window);
-  gtk_window_present (GTK_WINDOW (window));
-
-  return GDK_EVENT_STOP;
+  message = g_strdup_printf ("%c %s", direction, data);
+  g_log_default_handler ("goa", G_LOG_LEVEL_DEBUG, message, NULL);
+  g_free (message);
 }
-#endif /* GOA_INSPECTOR_ENABLED */
 
 static void
-web_view_load_changed_cb (WebKitWebView  *web_view,
-                          WebKitLoadEvent load_event,
-                          gpointer        user_data)
+web_view_notify_load_status_cb (GObject *object, GParamSpec *pspec, gpointer user_data)
 {
   GoaWebView *self = GOA_WEB_VIEW (user_data);
+  WebKitWebView *web_view = WEBKIT_WEB_VIEW (object);
+  WebKitLoadStatus status;
 
-  switch (load_event)
+  status = webkit_web_view_get_load_status (web_view);
+  switch (status)
     {
-    case WEBKIT_LOAD_STARTED:
-    case WEBKIT_LOAD_COMMITTED:
+    case WEBKIT_LOAD_PROVISIONAL:
       {
+        WebKitNetworkRequest *request;
+        WebKitWebDataSource *source;
+        WebKitWebFrame *frame;
         const gchar *uri;
         gchar *title;
 
-        uri = webkit_web_view_get_uri (web_view);
+        frame = webkit_web_view_get_main_frame (web_view);
+        source = webkit_web_frame_get_provisional_data_source (frame);
+        request = webkit_web_data_source_get_initial_request (source);
+        uri = webkit_network_request_get_uri (request);
         title = web_view_create_loading_title (uri);
 
         web_view_floating_bar_update (self, title);
@@ -190,10 +148,7 @@ web_view_load_changed_cb (WebKitWebView
         break;
       }
 
-    case WEBKIT_LOAD_REDIRECTED:
-      /* TODO: Update the loading uri */
-      break;
-
+    case WEBKIT_LOAD_FAILED:
     case WEBKIT_LOAD_FINISHED:
       web_view_floating_bar_update (self, NULL);
       break;
@@ -204,222 +159,191 @@ web_view_load_changed_cb (WebKitWebView
 }
 
 static void
-web_view_notify_estimated_load_progress_cb (GObject    *object,
-                                            GParamSpec *pspec,
-                                            gpointer    user_data)
+web_view_notify_progress_cb (GObject *object, GParamSpec *pspec, gpointer user_data)
 {
   GoaWebView *self = GOA_WEB_VIEW (user_data);
+  GoaWebViewPrivate *priv = self->priv;
   WebKitWebView *web_view = WEBKIT_WEB_VIEW (object);
   gboolean loading;
   const gchar *uri;
   gdouble progress;
 
-  if (self->clear_notify_progress_id != 0)
+  if (priv->clear_notify_progress_id != 0)
     {
-      g_source_remove (self->clear_notify_progress_id);
-      self->clear_notify_progress_id = 0;
+      g_source_remove (priv->clear_notify_progress_id);
+      priv->clear_notify_progress_id = 0;
     }
 
   uri = webkit_web_view_get_uri (web_view);
   if (!uri || g_str_equal (uri, "about:blank"))
     return;
 
-  progress = webkit_web_view_get_estimated_load_progress (web_view);
-  loading = webkit_web_view_is_loading (web_view);
+  progress = webkit_web_view_get_progress (WEBKIT_WEB_VIEW (priv->web_view));
+  loading = web_view_is_loading (self);
 
   if (progress == 1.0 || !loading)
-    self->clear_notify_progress_id = g_timeout_add (500, web_view_clear_notify_progress_cb, self);
+    priv->clear_notify_progress_id = g_timeout_add (500, web_view_clear_notify_progress_cb, self);
   else
-    gtk_widget_show (self->progress_bar);
+    gtk_widget_show (priv->progress_bar);
 
-  gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (self->progress_bar),
+  gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (priv->progress_bar),
                                  (loading || progress == 1.0) ? progress : 0.0);
 }
 
 static void
-web_view_script_message_received_deny_click_cb (GoaWebView *self)
-{
-  g_signal_emit (self, signals[DENY_CLICK], 0);
-}
-
-static void
-web_view_script_message_received_password_submit_cb (GoaWebView *self, WebKitJavascriptResult *js_result)
-{
-  JSGlobalContextRef js_context;
-  JSStringRef js_string;
-  JSValueRef js_value;
-  gsize max_size;
-
-  js_value = webkit_javascript_result_get_value (js_result);
-  js_context = webkit_javascript_result_get_global_context (js_result);
-  js_string = JSValueToStringCopy (js_context, js_value, NULL);
-  max_size = JSStringGetMaximumUTF8CStringSize (js_string);
-  if (max_size > 0)
-    {
-      gchar *password;
-
-      password = g_malloc0 (max_size);
-      JSStringGetUTF8CString (js_string, password, max_size);
-      g_signal_emit (self, signals[PASSWORD_SUBMIT], 0, password);
-      g_free (password);
-    }
-
-  JSStringRelease (js_string);
-}
-
-static void
-goa_web_view_constructed (GObject *object)
-{
-  GoaWebView *self = GOA_WEB_VIEW (object);
-  WebKitCookieManager *cookie_manager;
-  gchar *jar_dir;
-  gchar *jar_file;
-
-  G_OBJECT_CLASS (goa_web_view_parent_class)->constructed (object);
-
-  self->context = webkit_web_context_new ();
-  g_signal_connect_swapped (self->context,
-                            "initialize-web-extensions",
-                            G_CALLBACK (web_view_initialize_web_extensions_cb),
-                            self);
-
-  cookie_manager = webkit_web_context_get_cookie_manager (self->context);
-  jar_file = g_build_filename (g_get_user_cache_dir (), "goa-1.0", "cookies.sqlite", NULL);
-  jar_dir = g_path_get_dirname (jar_file);
-  g_mkdir_with_parents (jar_dir, 0700);
-  self->cookie_jar = soup_cookie_jar_db_new (jar_file, FALSE);
-  webkit_cookie_manager_set_persistent_storage (cookie_manager, jar_file, WEBKIT_COOKIE_PERSISTENT_STORAGE_SQLITE);
-  webkit_cookie_manager_delete_all_cookies (cookie_manager);
-  g_free (jar_dir);
-  g_free (jar_file);
-
-  self->user_content_manager = webkit_user_content_manager_new ();
-  g_signal_connect_swapped (self->user_content_manager,
-                            "script-message-received::deny-click",
-                            G_CALLBACK (web_view_script_message_received_deny_click_cb),
-                            self);
-  g_signal_connect_swapped (self->user_content_manager,
-                            "script-message-received::password-submit",
-                            G_CALLBACK (web_view_script_message_received_password_submit_cb),
-                            self);
-  webkit_user_content_manager_register_script_message_handler (self->user_content_manager, "deny-click");
-  webkit_user_content_manager_register_script_message_handler (self->user_content_manager, "password-submit");
-
-  self->web_view = GTK_WIDGET (g_object_new (WEBKIT_TYPE_WEB_VIEW,
-                                             "user-content-manager", self->user_content_manager,
-                                             "web-context", self->context,
-                                             NULL));
-  gtk_widget_set_size_request (self->web_view, 500, 400);
-  gtk_container_add (GTK_CONTAINER (self), self->web_view);
-
-#ifdef GOA_INSPECTOR_ENABLED
-  {
-    WebKitSettings *settings;
-    WebKitWebInspector *inspector;
-
-    /* Setup the inspector */
-    settings = webkit_web_view_get_settings (WEBKIT_WEB_VIEW (self->web_view));
-    g_object_set (settings, "enable-developer-extras", TRUE, NULL);
-
-    inspector = webkit_web_view_get_inspector (WEBKIT_WEB_VIEW (self->web_view));
-    g_signal_connect (inspector, "closed", G_CALLBACK (web_view_inspector_closed_cb), NULL);
-    g_signal_connect (inspector, "open-window", G_CALLBACK (web_view_inspector_open_window_cb), NULL);
-  }
-#endif /* GOA_INSPECTOR_ENABLED */
-
-  /* statusbar is hidden by default */
-  self->floating_bar = nautilus_floating_bar_new (NULL, FALSE);
-  gtk_widget_set_halign (self->floating_bar, GTK_ALIGN_START);
-  gtk_widget_set_valign (self->floating_bar, GTK_ALIGN_END);
-  gtk_widget_set_no_show_all (self->floating_bar, TRUE);
-  gtk_overlay_add_overlay (GTK_OVERLAY (self), self->floating_bar);
-
-  self->progress_bar = gtk_progress_bar_new ();
-  gtk_style_context_add_class (gtk_widget_get_style_context (self->progress_bar),
-                               GTK_STYLE_CLASS_OSD);
-  gtk_widget_set_halign (self->progress_bar, GTK_ALIGN_FILL);
-  gtk_widget_set_valign (self->progress_bar, GTK_ALIGN_START);
-  gtk_overlay_add_overlay (GTK_OVERLAY (self), self->progress_bar);
-
-  self->notify_progress_id = g_signal_connect (self->web_view,
-                                               "notify::estimated-load-progress",
-                                               G_CALLBACK (web_view_notify_estimated_load_progress_cb),
-                                               self);
-  self->notify_load_status_id = g_signal_connect (self->web_view,
-                                                  "load_changed",
-                                                  G_CALLBACK (web_view_load_changed_cb),
-                                                  self);
-}
-
-static void
 goa_web_view_dispose (GObject *object)
 {
   GoaWebView *self = GOA_WEB_VIEW (object);
+  GoaWebViewPrivate *priv = self->priv;
 
-  g_clear_object (&self->cookie_jar);
-  g_clear_object (&self->user_content_manager);
-  g_clear_object (&self->context);
-
-  if (self->clear_notify_progress_id != 0)
+  if (priv->clear_notify_progress_id != 0)
     {
-      g_source_remove (self->clear_notify_progress_id);
-      self->clear_notify_progress_id = 0;
+      g_source_remove (priv->clear_notify_progress_id);
+      priv->clear_notify_progress_id = 0;
     }
 
-  if (self->notify_load_status_id != 0)
+  if (priv->notify_load_status_id != 0)
     {
-      g_signal_handler_disconnect (self->web_view, self->notify_load_status_id);
-      self->notify_load_status_id = 0;
+      g_signal_handler_disconnect (priv->web_view, priv->notify_load_status_id);
+      priv->notify_load_status_id = 0;
     }
 
-  if (self->notify_progress_id != 0)
+  if (priv->notify_progress_id != 0)
     {
-      g_signal_handler_disconnect (self->web_view, self->notify_progress_id);
-      self->notify_progress_id = 0;
+      g_signal_handler_disconnect (priv->web_view, priv->notify_progress_id);
+      priv->notify_progress_id = 0;
     }
 
   G_OBJECT_CLASS (goa_web_view_parent_class)->dispose (object);
 }
 
-static void
-goa_web_view_finalize (GObject *object)
+#ifdef GOA_INSPECTOR_ENABLED
+static WebKitWebView *
+web_inspector_inspect_web_view_cb (WebKitWebInspector *inspector,
+                                   WebKitWebView      *web_view,
+                                   gpointer            user_data)
 {
-  GoaWebView *self = GOA_WEB_VIEW (object);
+  GtkWidget *inspector_web_view;
+  GtkWidget *scrolled_window;
+  GtkWidget *window;
+
+  inspector_web_view = webkit_web_view_new ();
+
+  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
+  gtk_window_resize (GTK_WINDOW (window), 800, 600);
 
-  g_free (self->existing_identity);
+  scrolled_window = gtk_scrolled_window_new (NULL, NULL);
+  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window),
+                                  GTK_POLICY_AUTOMATIC,
+                                  GTK_POLICY_AUTOMATIC);
 
-  if (self->provider != NULL)
-    g_object_remove_weak_pointer (G_OBJECT (self->provider), (gpointer *) &self->provider);
+  gtk_container_add (GTK_CONTAINER (window), scrolled_window);
+  gtk_container_add (GTK_CONTAINER (scrolled_window), inspector_web_view);
 
-  G_OBJECT_CLASS (goa_web_view_parent_class)->finalize (object);
+  g_object_set_data (G_OBJECT (inspector), "window", window);
+
+  return WEBKIT_WEB_VIEW (inspector_web_view);
 }
 
-static void
-goa_web_view_set_property (GObject *object, guint prop_id, const GValue *value, GParamSpec *pspec)
+static gboolean
+web_inspector_show_window_cb (WebKitWebInspector *inspector,
+                              gpointer            user_data)
 {
-  GoaWebView *self = GOA_WEB_VIEW (object);
+  GtkWidget *window;
+  GtkWindowGroup *group;
 
-  switch (prop_id)
-    {
-    case PROP_EXISTING_IDENTITY:
-      self->existing_identity = g_value_dup_string (value);
-      break;
+  group = gtk_window_group_new ();
 
-    case PROP_PROVIDER:
-      self->provider = GOA_PROVIDER (g_value_get_object (value));
-      if (self->provider != NULL)
-        g_object_add_weak_pointer (G_OBJECT (self->provider), (gpointer *) &self->provider);
-      break;
+  window = g_object_get_data (G_OBJECT (inspector), "window");
+  gtk_window_group_add_window (group, GTK_WINDOW (window));
+  gtk_widget_show_all (window);
+  gtk_window_present (GTK_WINDOW (window));
 
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-      break;
-    }
+  g_object_unref (group);
+  return GDK_EVENT_STOP;
 }
+#endif /* GOA_INSPECTOR_ENABLED */
 
 static void
 goa_web_view_init (GoaWebView *self)
 {
+  GoaWebViewPrivate *priv;
+  GtkWidget *scrolled_window;
+  SoupCookieJar *cookie_jar;
+  SoupLogger *logger;
+  SoupSession *session;
+  WebKitWebSettings *settings;
+
+  self->priv = GOA_WEB_VIEW_GET_PRIVATE (self);
+  priv = self->priv;
+
+  session = webkit_get_default_session ();
+  g_object_set (session, SOUP_SESSION_SSL_USE_SYSTEM_CA_FILE, TRUE, SOUP_SESSION_SSL_STRICT, TRUE, NULL);
+
+  soup_session_add_feature_by_type (session, SOUP_TYPE_PROXY_RESOLVER_DEFAULT);
+  g_object_set (session, "accept-language-auto", TRUE, NULL);
+
+  soup_session_remove_feature_by_type (session, SOUP_TYPE_COOKIE_JAR);
+  cookie_jar = soup_cookie_jar_new ();
+  soup_session_add_feature (session, SOUP_SESSION_FEATURE (cookie_jar));
+  g_object_unref (cookie_jar);
+
+  logger = soup_logger_new (SOUP_LOGGER_LOG_BODY, -1);
+  soup_logger_set_printer (logger, web_view_log_printer, NULL, NULL);
+  soup_session_add_feature (session, SOUP_SESSION_FEATURE (logger));
+  g_object_unref (logger);
+
+  scrolled_window = gtk_scrolled_window_new (NULL, NULL);
+  gtk_widget_set_size_request (scrolled_window, 500, 400);
+  gtk_scrolled_window_set_shadow_type (GTK_SCROLLED_WINDOW (scrolled_window), GTK_SHADOW_IN);
+  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window),
+                                  GTK_POLICY_AUTOMATIC,
+                                  GTK_POLICY_AUTOMATIC);
+  gtk_container_add (GTK_CONTAINER (self), scrolled_window);
+
+  priv->web_view = webkit_web_view_new ();
+  priv->status = WEBKIT_LOAD_PROVISIONAL;
+  gtk_container_add (GTK_CONTAINER (scrolled_window), priv->web_view);
+
+  settings = webkit_web_view_get_settings (WEBKIT_WEB_VIEW (priv->web_view));
+  g_object_set (settings, "user-stylesheet-uri", "file://" PACKAGE_DATA_DIR "/goawebview.css", NULL);
+
+#ifdef GOA_INSPECTOR_ENABLED
+  {
+    WebKitWebInspector *inspector;
+
+    /* Setup the inspector */
+    g_object_set (settings, "enable-developer-extras", TRUE, NULL);
+    inspector = webkit_web_view_get_inspector (WEBKIT_WEB_VIEW (priv->web_view));
+    webkit_web_inspector_show (WEBKIT_WEB_INSPECTOR (inspector));
+
+    g_signal_connect (inspector, "inspect-web-view", G_CALLBACK (web_inspector_inspect_web_view_cb), NULL);
+    g_signal_connect (inspector, "show-window", G_CALLBACK (web_inspector_show_window_cb), NULL);
+  }
+#endif /* GOA_INSPECTOR_ENABLED */
+
+  /* statusbar is hidden by default */
+  priv->floating_bar = nautilus_floating_bar_new (NULL, FALSE);
+  gtk_widget_set_halign (priv->floating_bar, GTK_ALIGN_START);
+  gtk_widget_set_valign (priv->floating_bar, GTK_ALIGN_END);
+  gtk_widget_set_no_show_all (priv->floating_bar, TRUE);
+  gtk_overlay_add_overlay (GTK_OVERLAY (self), priv->floating_bar);
+
+  priv->progress_bar = gtk_progress_bar_new ();
+  gtk_style_context_add_class (gtk_widget_get_style_context (priv->progress_bar),
+                               GTK_STYLE_CLASS_OSD);
+  gtk_widget_set_halign (priv->progress_bar, GTK_ALIGN_FILL);
+  gtk_widget_set_valign (priv->progress_bar, GTK_ALIGN_START);
+  gtk_overlay_add_overlay (GTK_OVERLAY (self), priv->progress_bar);
+
+  priv->notify_progress_id = g_signal_connect (priv->web_view,
+                                               "notify::progress",
+                                               G_CALLBACK (web_view_notify_progress_cb),
+                                               self);
+  priv->notify_load_status_id = g_signal_connect (priv->web_view,
+                                                  "notify::load-status",
+                                                  G_CALLBACK (web_view_notify_load_status_cb),
+                                                  self);
 }
 
 static void
@@ -428,71 +352,29 @@ goa_web_view_class_init (GoaWebViewClass
   GObjectClass *object_class;
 
   object_class = G_OBJECT_CLASS (klass);
-  object_class->constructed = goa_web_view_constructed;
   object_class->dispose = goa_web_view_dispose;
-  object_class->finalize = goa_web_view_finalize;
-  object_class->set_property = goa_web_view_set_property;
 
-  g_object_class_install_property (object_class,
-                                   PROP_EXISTING_IDENTITY,
-                                   g_param_spec_string ("existing-identity",
-                                                        "A GoaAccount identity",
-                                                        "The user name with which we want to prefill the form",
-                                                        NULL,
-                                                        G_PARAM_WRITABLE |
-                                                        G_PARAM_CONSTRUCT_ONLY |
-                                                        G_PARAM_STATIC_STRINGS));
-
-  g_object_class_install_property (object_class,
-                                   PROP_PROVIDER,
-                                   g_param_spec_object ("provider",
-                                                        "A GoaProvider",
-                                                        "The provider that is represented by this view",
-                                                        GOA_TYPE_PROVIDER,
-                                                        G_PARAM_WRITABLE |
-                                                        G_PARAM_CONSTRUCT_ONLY |
-                                                        G_PARAM_STATIC_STRINGS));
-
-  signals[DENY_CLICK] = g_signal_new ("deny-click",
-                                      G_TYPE_FROM_CLASS (klass),
-                                      G_SIGNAL_RUN_LAST,
-                                      0,
-                                      NULL,
-                                      NULL,
-                                      g_cclosure_marshal_VOID__VOID,
-                                      G_TYPE_NONE,
-                                      0);
-
-  signals[PASSWORD_SUBMIT] = g_signal_new ("password-submit",
-                                           G_TYPE_FROM_CLASS (klass),
-                                           G_SIGNAL_RUN_LAST,
-                                           0,
-                                           NULL,
-                                           NULL,
-                                           g_cclosure_marshal_VOID__STRING,
-                                           G_TYPE_NONE,
-                                           1,
-                                           G_TYPE_STRING);
+  g_type_class_add_private (object_class, sizeof (GoaWebViewPrivate));
 }
 
 GtkWidget *
-goa_web_view_new (GoaProvider *provider, const gchar *existing_identity)
+goa_web_view_new (void)
 {
-  return g_object_new (GOA_TYPE_WEB_VIEW, "provider", provider, "existing-identity", existing_identity, NULL);
+  return g_object_new (GOA_TYPE_WEB_VIEW, NULL);
 }
 
 GtkWidget *
 goa_web_view_get_view (GoaWebView *self)
 {
-  return self->web_view;
+  return self->priv->web_view;
 }
 
 void
 goa_web_view_fake_mobile (GoaWebView *self)
 {
-  WebKitSettings *settings;
+  WebKitWebSettings *settings;
 
-  settings = webkit_web_view_get_settings (WEBKIT_WEB_VIEW (self->web_view));
+  settings = webkit_web_view_get_settings (WEBKIT_WEB_VIEW (self->priv->web_view));
 
   /* This is based on the HTC Wildfire's user agent. Some
    * providers, like Google, refuse to provide the mobile
@@ -507,20 +389,26 @@ goa_web_view_fake_mobile (GoaWebView *se
    * Also note that the user agents of some mobile browsers may
    * not work. eg., Nokia N9.
    */
-  webkit_settings_set_user_agent (settings,
-                                  "Mozilla/5.0 (GNOME; not Android) "
-                                  "AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile");
+  g_object_set (G_OBJECT (settings),
+                "user-agent", "Mozilla/5.0 (GNOME; not Android) "
+                              "AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile",
+                NULL);
 }
 
 void
 goa_web_view_add_cookies (GoaWebView *self,
                           GSList     *cookies)
 {
+  SoupCookieJar *cookie_jar;
+  SoupSession *session;
   GSList *l;
 
+  session = webkit_get_default_session ();
+  cookie_jar = SOUP_COOKIE_JAR (soup_session_get_feature (session, SOUP_TYPE_COOKIE_JAR));
+
   for (l = cookies; l != NULL; l = l->next)
     {
       SoupCookie *cookie = l->data;
-      soup_cookie_jar_add_cookie (self->cookie_jar, soup_cookie_copy (cookie));
+      soup_cookie_jar_add_cookie (cookie_jar, soup_cookie_copy (cookie));
     }
 }
--- origsrc/gnome-online-accounts-3.18.2.1/src/goabackend/goawebview.h	2015-10-27 12:42:49.000000000 -0500
+++ src/gnome-online-accounts-3.18.2.1/src/goabackend/goawebview.h	2015-11-18 21:17:29.628213800 -0600
@@ -1,6 +1,6 @@
 /* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
  *
- * Copyright (C) 2012, 2015 Red Hat, Inc.
+ * Copyright (C) 2012 Red Hat, Inc.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -21,20 +21,32 @@
 
 #include <gtk/gtk.h>
 
-#include "goaprovider.h"
-
 G_BEGIN_DECLS
 
 #define GOA_TYPE_WEB_VIEW            (goa_web_view_get_type ())
 #define GOA_WEB_VIEW(object)         (G_TYPE_CHECK_INSTANCE_CAST ((object), GOA_TYPE_WEB_VIEW, GoaWebView))
+#define GOA_WEB_VIEW_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GOA_TYPE_WEB_VIEW, GoaWebViewClass))
 #define GOA_IS_WEB_VIEW(object)      (G_TYPE_CHECK_INSTANCE_TYPE ((object), GOA_TYPE_WEB_VIEW))
+#define GOA_IS_WEB_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GOA_TYPE_WEB_VIEW))
+#define GOA_WEB_VIEW_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GOA_TYPE_WEB_VIEW, GoaWebViewClass))
 
-typedef struct _GoaWebView      GoaWebView;
-typedef struct _GoaWebViewClass GoaWebViewClass;
+typedef struct _GoaWebView        GoaWebView;
+typedef struct _GoaWebViewClass   GoaWebViewClass;
+typedef struct _GoaWebViewPrivate GoaWebViewPrivate;
+
+struct _GoaWebView
+{
+  GtkOverlay parent_instance;
+  GoaWebViewPrivate *priv;
+};
+
+struct _GoaWebViewClass
+{
+  GtkOverlayClass parent_class;
+};
 
 GType                  goa_web_view_get_type               (void) G_GNUC_CONST;
-GtkWidget             *goa_web_view_new                    (GoaProvider *provider,
-                                                            const gchar *existing_identity);
+GtkWidget             *goa_web_view_new                    (void);
 GtkWidget             *goa_web_view_get_view               (GoaWebView *self);
 void                   goa_web_view_fake_mobile            (GoaWebView *self);
 void                   goa_web_view_add_cookies            (GoaWebView *self,
